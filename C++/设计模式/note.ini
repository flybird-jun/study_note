1.template method
	早绑定->晚绑定 步骤1,3,4在父类 2,5在基类
	早绑定:在编译链接时绑定
	晚绑定:发生在运行时，基于不同类型的对象.(virtual)
	适合场景:1.一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。
			 2.各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
			 3.需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。(覆盖父类方法)

2.策略模式
	在有多种算法相似的情况下，使用 if...else if...else所带来的复杂和难以维护。
3.观察者模式
	1.一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。
	2.一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
	3.一个对象必须通知其他对象，而并不知道这些对象是谁。
	4.需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制
4.装饰器模式
 // 组合加继承减少类的个数，3*3->3+3
	在n种选择下每种选择还有m种。
5.桥接模式
	多种维度下的不同变化
	
	装饰器模式&桥接模式:
		都事使用组合的方式减少类的个数。
		装饰器模式:变化方向“一致”，只是类别不同
		桥接模式:变化方向不同
6.工厂模式
	需要显示定义创建类的方法。一个工厂创建一个类
7.抽象工厂
	在工厂模式下需要创建一系列的类。宝马工厂可生产不同颜色的车
8.原型模式
	1、资源优化场景。 
	2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 
	3、性能和安全要求的场景。 
	4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 
	5、一个对象多个修改者的场景。 
	6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。
	7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者
9.构建器..
　  1、当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。
　　2、当构造过程必须允许被构造的对象有不同的表示时。
10.单例模式
	保证一个类仅有一个实例，并提供一个访问它的全局访问点。
11.享元模式..
	当系统中有大量的细粒度对象实例，而且这些对象实例中有一些属性是重复的情况下，考虑使用.->字符串
12.门面模式
	客户端不需要知道系统内部的复杂联系，整个系统只需提供一个"接待员"即可
	注:封装接口
13.代理模式
	1、远程代理。
	2、虚拟代理。
	3、Copy-on-Write 代理。
	4、保护（Protect or Access）代理。
	5、Cache代理。
	6、防火墙（Firewall）代理。
	7、同步化（Synchronization）代理。
	8、智能引用（Smart Reference）代理。 
14.适配器
	将一个类的接口转换成客户希望的另外一个接口
15.中介者
	用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互	
16.状态模式
	对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为
	
17.备忘录
18.组合模式
19.迭代器

20.职责链
	为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。	
21.命令模式
	是命令的地方都可以使用命令模式
22.访问器
23.解析器