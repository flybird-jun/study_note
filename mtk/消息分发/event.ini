外部消息:task<->task
内部消息:task内module<->module
循环队列:mmi task
消息ID 定义在stack_msgs.h msg_type

外部消息的发送与接收:
	ilm_struct 内存申请要使用 allocate_ilm
	local_para 内存申请要使用 construct_local_para
		typedef struct
		{
			LOCAL_PARA_HDR
			char msg_buf[MSG_BUF_SIZE];
		}task_msg_struct;
		local_para = (task_msg_struct *)construct_local_para(sizeof(task_msg_struct), TD_CTRL);
	msg_send();
	
	receive_msg_ext_q_for_stack没有消息时会导致task挂起

mmi_frm_execute_current_protocol_handler:
	mmi_frm_search_event:
		protocol_event_handler_event[]存储所有event_id
		protocol_event_handler_funcptr[]存储对应的函数指针
mmi_frm_set_protocol_event_handler:
	设置消息处理函数
发送由外部队列或内部队列发送ilm_struct

mmi_frm_cb_emit_event:
	tbl_idx get through evt_id
	//静态注册的，<RECEIVER id="" proc=""/>生成在mmi_rp_callback_mgr_config.h
	mmi_cb_table_map[tbl_idx].static_table[...](evt)
		{
			有返回false的break;
		}
	//动态注册的，由mmi_frm_cb_reg_event函数注册
	mmi_cb_table_map[tbl_idx].header->next[..next]->cb(evt)
mmi_frm_post_event:
	将event和proc放入post_evt_header链表中，标志:POST_EVT
mmi_frm_send_event:evt,proc,user_data
	proc(evt)
mmi_frm_post_event_ex:
	将event proc result_cb result_cb_user_data放入post_evt_header链表中
	标志:POST_EVT_EX
mmi_frm_invoke_post_event:
	POST_EVT:
		proc(evt)
	POST_EVT_EX:
		proc(evt)
		result_cb(rst_evt)
			//EVT_ID_POST_CB_RST
	
	


	



	
	