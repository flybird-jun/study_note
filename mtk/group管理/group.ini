typedef struct _group_node_struct
{
    struct _base_node_struct    *m_prev;            \
    struct _base_node_struct    *m_next;            \
    U16                          priority;          \
    U16                          type;              \
    struct _group_node_struct   *parent;            \create_new_group:node_parent
    U32                         id;                 \create_new_group:node_new_id
    U16                         attrib;             \
    U16                         state;              \mmi_frm_group_create:MMI_SCENARIO_STATE_CREATE
    void                        *user_data;         \
    mmi_proc_func               proc;		    \

    CHAR                        *app_name;          \
    mmi_proc_func               caller_proc;        \
    void*                       caller_user_data;   \create_new_group:data
    struct _group_node_struct   *caller;    \create_new_group:node_parent
    struct _base_node_struct    *m_head;    \
    struct _base_node_struct    *m_tail;    \
    S32                         m_count;    \
    asm_data_struct             asm_data;   \
}group_node_struct;
typedef struct _base_node_struct
{
    struct _base_node_struct    *m_prev;            \
    struct _base_node_struct    *m_next;            \
    U16                          priority;          \
    U16                          type;              \
    struct _group_node_struct   *parent;            \
    U32                         id;                 \
    U16                         attrib;             \
    U16                         state;              \
    void                        *user_data;         \
    mmi_proc_func               proc;
}base_node_struct;

get_node_tree_op(1,2);从1开始深度优先搜索ID等于2的节点，没有就返回2

SG_GET_NODE_FROM_ALL(group_id):找到id=group_id的节点
SG_GET_NODE
mmi_frm_group_create:
  从三个根节点往下搜索节点等于parent_id的节点p ->return error
  create_new_group:
	从parent_id搜索id等于new_node_id的节点p->return p
	从shell.scenario_dangle搜索等于new_node_id的节点p->return p
	g:new new_node,new_node->parent = parent
  if return from g &&parent not in dangle
	new_node 挂在 shell.scenario_dangle子结点队列尾
	new_node


















